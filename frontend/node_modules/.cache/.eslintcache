[{"/home/wassim/Bureau/TODO/frontend/src/index.js":"1","/home/wassim/Bureau/TODO/frontend/src/App.js":"2","/home/wassim/Bureau/TODO/frontend/src/Context/UserContext.js":"3","/home/wassim/Bureau/TODO/frontend/src/Pages/Private.js":"4","/home/wassim/Bureau/TODO/frontend/src/Pages/LoginPage/Login.js":"5","/home/wassim/Bureau/TODO/frontend/src/Pages/RegisterPage/Register.js":"6","/home/wassim/Bureau/TODO/frontend/src/Pages/HomePage/Home.js":"7","/home/wassim/Bureau/TODO/frontend/src/Component/Navbar/Navbar.js":"8","/home/wassim/Bureau/TODO/frontend/src/Component/Navbar/Tasks/Task.js":"9"},{"size":369,"mtime":1686902972232,"results":"10","hashOfConfig":"11"},{"size":562,"mtime":1686902972232,"results":"12","hashOfConfig":"11"},{"size":2810,"mtime":1687336405939,"results":"13","hashOfConfig":"11"},{"size":377,"mtime":1688853794081,"results":"14","hashOfConfig":"11"},{"size":1304,"mtime":1687252028969,"results":"15","hashOfConfig":"11"},{"size":1880,"mtime":1687338102276,"results":"16","hashOfConfig":"11"},{"size":1575,"mtime":1687338055592,"results":"17","hashOfConfig":"11"},{"size":409,"mtime":1686902972232,"results":"18","hashOfConfig":"11"},{"size":1112,"mtime":1687340691560,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"1doxv4i",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},"/home/wassim/Bureau/TODO/frontend/src/index.js",[],[],[],"/home/wassim/Bureau/TODO/frontend/src/App.js",[],[],"/home/wassim/Bureau/TODO/frontend/src/Context/UserContext.js",["53","54"],[],"import { useContext, useState, useEffect, createContext, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n\n\naxios.defaults.xsrfCookieName = \"csrftoken\";\naxios.defaults.xsrfHeaderName = \"X-CSRFToken\";\naxios.defaults.withCredentials = true;\n\nconst client = axios.create({\n\tbaseURL: `${process.env.REACT_APP_API_URL}/api`,\n});\n\nexport const UserContext = createContext();\n\nexport function UserContextProvider(props) {\n\tconst [currentUser, setCurrentUser] = useState();\n\tconst [username, setUsername] = useState();\n\tconst [tasks, setTasks] = useState([]);\n\tconst [serverValidation, setServerValidation] = useState('');\n\tconst navigate = useNavigate();\n\n\tuseEffect(() => {\n\t\tclient\n\t\t\t.get(\"/user\")\n\t\t\t.then((res) => {\n\t\t\t\tsetUsername(res.data['user']['username'])\n\t\t\t\tsetCurrentUser(true);\n\t\t\t\tnavigate(\"/private/home\");\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tsetCurrentUser(false);\n\t\t\t});\n\t}, []);\n\n\tconst signUp = (username, pwd) => {\n\t\tclient\n\t\t\t.post(\"/register\", {\n\t\t\t\tusername: username,\n\t\t\t\tpassword: pwd,\n\t\t\t})\n\t\t\t.then((res) => {\n\t\t\t\tclient\n\t\t\t\t\t.post(\"/login\", {\n\t\t\t\t\t\tusername: username,\n\t\t\t\t\t\tpassword: pwd,\n\t\t\t\t\t})\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\tsetCurrentUser(true);\n\t\t\t\t\t\tsetUsername(username);\n\t\t\t\t\t\tnavigate(\"/private/home\");\n\t\t\t\t\t\tsetServerValidation('');\n\t\t\t\t\t});\n\t\t\t}).catch((err) => {\n\t\t\t\t\tsetServerValidation(\"Username Already exists\");\n\t\t\t});\n\t};\n\n\tconst signIn = (username, pwd) => {\n\t\tclient\n\t\t\t.post(\"/login\", {\n\t\t\t\tusername: username,\n\t\t\t\tpassword: pwd,\n\t\t\t})\n\t\t\t.then((res) => {\n\t\t\t\tsetCurrentUser(true);\n\t\t\t\tsetUsername(username);\n\t\t\t\tnavigate(\"/private/home\");\n\t\t\t\tsetServerValidation('');\n\t\t\t}).catch((err) => {\n\t\t\t\tsetServerValidation(\"Username or password incorrect\")\n\t\t\t})\n\t};\n\n\tconst addTask = (description) => {\n\t\tclient.post('/add_task', {\n\t\t\tdescription: description,\n\t\t}).then((res) => {\n\t\t\tloadTasks();\n\t\t}).catch((err) => {\n\t\t\tconsole.log(err);\n\t\t})\n\t}\n\n\tconst removeTask = (task_id) => {\n\t\tclient.post('/remove_task', {\n\t\t\tid: task_id,\n\t\t}).then((res) => {\n\t\t\tloadTasks();\n\t\t}).catch((err) => {\n\t\t\tconsole.log(err);\n\t\t})\n\t}\n\n\tconst toggleTaskStatus = (task_id) => {\n\t\tclient.post('/toggle', {\n\t\t\tid: task_id,\n\t\t}).then((res) => {\n\t\t\tloadTasks();\n\t\t}).catch((err) => {\n\t\t\tconsole.log(err);\n\t\t})\n\t}\n \n\tconst logout = () => {\n\t\tclient.post(\"/logout\").then((res) => {\n\t\t\tsetCurrentUser(false);\n\t\t\tnavigate(\"/private/home\");\n\t\t});\n\t};\n\n\tconst loadTasks = useCallback(async () => {\n\t\tclient.get(\"/tasks\").then((res) => {\n\t\t   setTasks(Object.values(res.data));\n\t   }).catch((err) => {})\n   }, [])\n\n\treturn (\n\t\t<UserContext.Provider\n\t\t\tvalue={{ signUp, currentUser, signIn, logout,\n\t\t\t\t username, loadTasks, tasks, serverValidation,\n\t\t\t\t  addTask, removeTask, toggleTaskStatus }}\n\t\t>\n\t\t\t{props.children}\n\t\t</UserContext.Provider>\n\t);\n}\n","/home/wassim/Bureau/TODO/frontend/src/Pages/Private.js",[],[],"/home/wassim/Bureau/TODO/frontend/src/Pages/LoginPage/Login.js",["55","56"],[],"import React, { useState, useContext, useRef } from \"react\";\nimport { UserContext } from \"../../Context/UserContext\";\nimport \"./Login.css\";\n\nexport default function Login() {\n\tconst { signIn, serverValidation } = useContext(UserContext);\n\n\tconst inputs = useRef([]);\n\tconst addinputs = (e) => {\n\t\tif (e && !inputs.current.includes(e)) {\n\t\t\tinputs.current.push(e);\n\t\t}\n\t};\n\n\tconst formRef = useRef();\n\n\tconst handleLogin = async (e) => {\n\t\te.preventDefault();\n\t\t//validation coté serveur\n\t\ttry {\n\t\t\tconst cred = await signIn(\n\t\t\t\tinputs.current[0].value,\n\t\t\t\tinputs.current[1].value\n\t\t\t);\n\t\t\tformRef.current.reset();\n\t\t} catch (err) {}\n\t};\n\n\treturn (\n\t\t<div className=\"main-container\">\n\t\t\t<h1 className=\"main-title\">TODO</h1>\n\t\t\t<form\n\t\t\t\taction=\"#\"\n\t\t\t\tclassName=\"login-form\"\n\t\t\t\tref={formRef}\n\t\t\t\tonSubmit={(e) => {\n\t\t\t\t\thandleLogin(e);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<label htmlFor=\"username\">Username :</label>\n\t\t\t\t<input type=\"text\" id=\"username\" name=\"username\" ref={addinputs} />\n\t\t\t\t<label htmlFor=\"pwd\">Password :</label>\n\t\t\t\t<input type=\"password\" name=\"pwd\" id=\"pwd\" ref={addinputs} />\n\t\t\t\t<span>{serverValidation}</span>\n\t\t\t\t<span>\n\t\t\t\t\tDont have account ? <a href=\"/register\">Register here</a>\n\t\t\t\t</span>\n\t\t\t\t<button type=\"submit\" className=\"login-btn\">\n\t\t\t\t\tLogin\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t</div>\n\t);\n}\n","/home/wassim/Bureau/TODO/frontend/src/Pages/RegisterPage/Register.js",["57"],[],"import React, { useContext, useRef, useState } from \"react\";\nimport { UserContext } from \"../../Context/UserContext\";\nimport \"../LoginPage/Login.css\";\n\nexport default function Register() {\n\tconst [validation, setValidation] = useState(\"\");\n\tconst { signUp, serverValidation } = useContext(UserContext);\n\n\tconst inputs = useRef([]);\n\tconst addinputs = (e) => {\n\t\tif (e && !inputs.current.includes(e)) {\n\t\t\tinputs.current.push(e);\n\t\t}\n\t};\n\tconst formRef = useRef();\n\n\tconst handleForm = async (e) => {\n\t\te.preventDefault();\n\n\t\t// Validation coté front\n\t\tif (\n\t\t\t(inputs.current[1].value.length || inputs.current[2].value.length) < 8\n\t\t) {\n\t\t\tsetValidation(\"8 characters minimum !\");\n\t\t\treturn;\n\t\t} else if (inputs.current[1].value !== inputs.current[2].value) {\n\t\t\tsetValidation(\"passwords do not match !\");\n\t\t\treturn;\n\t\t}\n\n\t\t//Validation coté back\n\t\ttry {\n\t\t\tconst cred = await signUp(\n\t\t\t\tinputs.current[0].value,\n\t\t\t\tinputs.current[1].value\n\t\t\t);\n\t\t\tformRef.current.reset();\n\t\t\tsetValidation(\"\");\n\t\t} catch (err) {}\n\t};\n\n\treturn (\n\t\t<div className=\"main-container\">\n\t\t\t<h1 className=\"main-title\">TODO</h1>\n\t\t\t<form\n\t\t\t\taction=\"#\"\n\t\t\t\tclassName=\"login-form\"\n\t\t\t\tonSubmit={(e) => {\n\t\t\t\t\thandleForm(e);\n\t\t\t\t}}\n\t\t\t\tref={formRef}\n\t\t\t>\n\t\t\t\t<label htmlFor=\"username\">Username :</label>\n\t\t\t\t<input type=\"text\" id=\"username\" name=\"username\" ref={addinputs} />\n\t\t\t\t<label htmlFor=\"pwd\">Password :</label>\n\t\t\t\t<input type=\"password\" name=\"pwd\" id=\"pwd\" ref={addinputs} />\n\t\t\t\t<label htmlFor=\"confirm-pwd\">Confirm Password :</label>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"password\"\n\t\t\t\t\tname=\"confirm-pwd\"\n\t\t\t\t\tid=\"confirm-pwd\"\n\t\t\t\t\tref={addinputs}\n\t\t\t\t\tautocomplete=\"off\"\n\t\t\t\t/>\n\t\t\t\t<span>{validation || serverValidation}</span>\n\t\t\t\t<span>\n\t\t\t\t\tHave an account ? <a href=\"/\">Login here</a>\n\t\t\t\t</span>\n\t\t\t\t<button type=\"submit\" className=\"login-btn\">\n\t\t\t\t\tRegister\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t</div>\n\t);\n}\n","/home/wassim/Bureau/TODO/frontend/src/Pages/HomePage/Home.js",["58"],[],"import React, { useState, useContext, useEffect, useRef } from \"react\";\nimport Navbar from \"../../Component/Navbar/Navbar\";\nimport Task from \"../../Component/Navbar/Tasks/Task\";\nimport { UserContext } from \"../../Context/UserContext\";\nimport \"./Home.css\";\n\nexport default function Home() {\n\tconst [addTaskForm, setAddTaskForm] = useState(false);\n\tconst {loadTasks, tasks, addTask} = useContext(UserContext)\n\n\tconst inputRef = useRef()\n\tconst formRef = useRef()\n\n\tconst handleAddTaskButton = () => {\n\t\tsetAddTaskForm(true);\n\t};\n\n\tconst handleAddTaskForm = async (e) => {\n\t\te.preventDefault();\n\n\t\ttry {\n\t\t\tconst task = await addTask(inputRef.current.value);\n\t\t\tformRef.current.reset()\n\t\t} catch(err) {}\n\t};\n\t\n\t\n\n\tuseEffect(() => {\n\t\tloadTasks().catch(console.error)\n\t}, [loadTasks]);\n\n\treturn (\n\t\t<div className=\"main\">\n\t\t\t<Navbar />\n\t\t\t<div className=\"task-container\">\n\t\t\t\t<h1>Tasks</h1>\n\t\t\t\t{!tasks.includes(\"no tasks found\") && tasks.map(task => (<Task key={task.id} id={task.id} description={task.description} done={task.done}/>))}\n\t\t\t\t{!addTaskForm ? (\n\t\t\t\t\t<button className=\"add-btn\" onClick={handleAddTaskButton}>\n\t\t\t\t\t\t+\n\t\t\t\t\t</button>\n\t\t\t\t) : (\n\t\t\t\t\t<form action=\"#\" className=\"form-task\" ref={formRef} onSubmit={(e) => { handleAddTaskForm(e)}}>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tname=\"new-task\"\n\t\t\t\t\t\t\tclassName=\"input-task\"\n\t\t\t\t\t\t\tid=\"new-task\"\n\t\t\t\t\t\t\tplaceholder=\"Add your task\"\n\t\t\t\t\t\t\tref={inputRef}\n\t\t\t\t\t\t\tautocomplete=\"off\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button type=\"submit\" className=\"submit-task\">\n\t\t\t\t\t\t\t+\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</form>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","/home/wassim/Bureau/TODO/frontend/src/Component/Navbar/Navbar.js",[],[],"/home/wassim/Bureau/TODO/frontend/src/Component/Navbar/Tasks/Task.js",["59","60","61"],[],"import React, {useContext, useEffect, useState} from 'react'\nimport { UserContext } from '../../../Context/UserContext'\nimport deleteIcon from './delete.svg'\nimport './Task.css'\n\nexport default function Task(props) {\n\n  const [done, setDone ] = useState(props.done)\n  const { removeTask, toggleTaskStatus } = useContext(UserContext)\n\n  const handleDelete = async (id) => {\n    try {\n\t\t\tconst task = await removeTask(id);\n\t\t} catch(err) {}\n  }\n\n  const handleToggle = async (id) => {\n    if(done) {\n      setDone(false)\n    }else {\n      setDone(true)\n    }\n    \n    try{\n      const status = await toggleTaskStatus(id);\n      console.log(\"request\");\n    }catch(err) {}\n  }\n\n  return (\n    <div className='task'>\n      <span className={done ? \"checked\" : \"\"}>{props.description}</span>\n      {done ? \n      <input type=\"checkbox\" className='done' checked onChange={(e) => handleToggle(props.id)}/> :\n      <input type=\"checkbox\" className='done'  onChange={(e) => handleToggle(props.id)}/>\n      }\n      \n      <img src={deleteIcon} alt=\"delete-icon\" onClick={(e) => {handleDelete(props.id)}} />\n    </div>\n  )\n}\n",{"ruleId":"62","severity":1,"message":"63","line":1,"column":10,"nodeType":"64","messageId":"65","endLine":1,"endColumn":20},{"ruleId":"66","severity":1,"message":"67","line":34,"column":5,"nodeType":"68","endLine":34,"endColumn":7,"suggestions":"69"},{"ruleId":"62","severity":1,"message":"70","line":1,"column":17,"nodeType":"64","messageId":"65","endLine":1,"endColumn":25},{"ruleId":"62","severity":1,"message":"71","line":21,"column":10,"nodeType":"64","messageId":"65","endLine":21,"endColumn":14},{"ruleId":"62","severity":1,"message":"71","line":33,"column":10,"nodeType":"64","messageId":"65","endLine":33,"endColumn":14},{"ruleId":"62","severity":1,"message":"72","line":22,"column":10,"nodeType":"64","messageId":"65","endLine":22,"endColumn":14},{"ruleId":"62","severity":1,"message":"73","line":1,"column":28,"nodeType":"64","messageId":"65","endLine":1,"endColumn":37},{"ruleId":"62","severity":1,"message":"72","line":13,"column":10,"nodeType":"64","messageId":"65","endLine":13,"endColumn":14},{"ruleId":"62","severity":1,"message":"74","line":25,"column":13,"nodeType":"64","messageId":"65","endLine":25,"endColumn":19},"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["75"],"'useState' is defined but never used.","'cred' is assigned a value but never used.","'task' is assigned a value but never used.","'useEffect' is defined but never used.","'status' is assigned a value but never used.",{"desc":"76","fix":"77"},"Update the dependencies array to be: [navigate]",{"range":"78","text":"79"},[936,938],"[navigate]"]